{"version":3,"sources":["index.js"],"names":["Square","className","onClick","props","this","value","React","Component","Board","state","squares","Array","fill","xIsNext","i","slice","calculateWinner","setState","handleClick","status","winner","renderSquare","Game","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2OAIMA,G,6KACM,IAAD,OACP,OACE,4BACEC,UAAU,SACVC,QAAS,kBAAM,EAAKC,MAAMD,YAEzBE,KAAKD,MAAME,W,GAPCC,IAAMC,YAarBC,E,kDAEJ,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJM,E,wDAQPC,GACV,IAAMJ,EAAUN,KAAKK,MAAMC,QAAQK,QAC/BC,EAAgBN,IAAYA,EAAQI,KAGxCJ,EAAQI,GAAKV,KAAKK,MAAMI,QAAU,IAAM,IACxCT,KAAKa,SAAS,CACZP,QAASA,EACTG,SAAUT,KAAKK,MAAMI,a,mCAKZC,GAAI,IAAD,OACd,OACE,kBAACd,EAAD,CACEK,MAAOD,KAAKK,MAAMC,QAAQI,GAC1BZ,QAAS,kBAAM,EAAKgB,YAAYJ,Q,+BAKpC,IACIK,EADEC,EAASJ,EAAgBZ,KAAKK,MAAMC,SAQ1C,OALES,EADEC,EACO,WAAaA,EAEb,iBAAmBhB,KAAKK,MAAMI,QAAU,IAAM,KAIvD,6BACE,yBAAKZ,UAAU,UAAUkB,GACzB,yBAAKlB,UAAU,aACZG,KAAKiB,aAAa,GAClBjB,KAAKiB,aAAa,GAClBjB,KAAKiB,aAAa,IAErB,yBAAKpB,UAAU,aACZG,KAAKiB,aAAa,GAClBjB,KAAKiB,aAAa,GAClBjB,KAAKiB,aAAa,IAErB,yBAAKpB,UAAU,aACZG,KAAKiB,aAAa,GAClBjB,KAAKiB,aAAa,GAClBjB,KAAKiB,aAAa,S,GAxDTf,IAAMC,WA+DpBe,E,uKAEF,OACE,yBAAKrB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACO,EAAD,OAEF,yBAAKP,UAAU,aACb,8BACA,mC,GATSK,IAAMC,WAwBzB,SAASS,EAAgBN,GAWvB,IAVA,IAAMa,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAT,EAAI,EAAGA,EAAIS,EAAMC,OAAQV,IAAK,CAAC,IAAD,cACnBS,EAAMT,GADa,GAC9BW,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIjB,EAAQe,IAAMf,EAAQe,KAAOf,EAAQgB,IAAMhB,EAAQe,KAAOf,EAAQiB,GACpE,OAAOjB,EAAQe,GAGnB,OAAO,KAvBTG,IAASC,OACP,kBAACP,EAAD,MACAQ,SAASC,eAAe,W","file":"static/js/main.62ff1784.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <button\n        className=\"square\"\n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)} />\n    );\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}